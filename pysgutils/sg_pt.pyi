from typing import *
import ctypes
import os
import enum

from . import sg_lib

class SGPTBase(ctypes.c_void_p):
    ...

def scsi_pt_version() -> str:
    ...

def scsi_pt_open_device(device_name: str, read_only: bool=False, verbose: bool=False) -> int:
    ...

def scsi_pt_open_flags(device_name: str, flags: int=os.O_RDWR, verbose: bool=False) -> int:
    ...

def scsi_pt_close_device(device_fd: int):
    ...

def construct_scsi_pt_obj() -> SGPTBase:
    ...

def clear_scsi_pt_obj(objp: SGPTBase):
    ...

def set_scsi_pt_cdb(objp: SGPTBase, cdb: bytes):
    ...

def set_scsi_pt_data_in(objp: SGPTBase, dxferp: ctypes.Array):
    ...

def set_scsi_pt_data_out(objp: SGPTBase, dxferp: Union[bytes, ctypes.Array]):
    ...

def set_scsi_pt_packet_id(objp: SGPTBase, packet_id: int):
    ...

def set_scsi_pt_tag(objp: SGPTBase, tag: int):
    ...

def set_scsi_pt_task_management(objp: SGPTBase, tmf_code: int):
    ...

class SCSIPTFlags(enum.IntEnum):
    ...

def set_scsi_pt_flags(objp: SGPTBase, flags: int):
    ...

def do_scsi_pt(objp: SGPTBase, fd: int, timeout_secs: int, verbose: bool=False):
    ...

class SCSIPTResult(enum.IntEnum):
    ...

def get_scsi_pt_result_category(objp: SGPTBase) -> SCSIPTResult:
    ...

def get_scsi_pt_resid(objp: SGPTBase) -> int:
    ...

def get_scsi_pt_status_response(objp: SGPTBase) -> sg_lib.SCSIStatusCode:
    ...

def get_scsi_pt_sense_len(objp: SGPTBase) -> int:
    ...

def get_scsi_pt_os_err(objp: SGPTBase) -> int:
    ...

def get_scsi_pt_os_err_str(objp: SGPTBase) -> str:
    ...

def get_scsi_pt_transport_err(objp: SGPTBase) -> int:
    ...

def get_scsi_pt_transport_err_str(objp: SGPTBase) -> str:
    ...

def get_scsi_pt_duration_ms(objp: SGPTBase) -> int:
    ...

def destruct_scsi_pt_obj(objp: SGPTBase):
    ...

def scsi_pt_win32_direct(objp: SGPTBase, state_direct: bool):
    ...

def scsi_pt_win32_spt_state() -> bool:
    ...
